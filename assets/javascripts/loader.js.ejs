//= require vendor/modernizr.custom
//= require vendor/yepnope
//= require_self


/*global yepnope*/


window.loadAssets = (function () {
  'use strict';


  // Mapping of package names to package metadata for all available packages at
  // the currect locale. The metadata is an object consists of three keys:
  //
  //   assets.js[package]           - URL to bundle, containing this package's JS
  //   assets.css[package]          - URL to bundle, containing this package's CSS
  //   assets.loadingQueue[package] - sorted list of dependencies, including this
  //                                  package (just list of package names)
  //
  // This variable is initialized by `loadAssets.init()`.

  var assets;


  // Track loaded URLs (as keys, values are just `true`)
  var loaded = {};


  // Simple cross-browser `forEach` iterator for arrays.
  function forEach(array, iterator) {
    var index, length;

    for (index = 0, length = array.length; index < length; index += 1) {
      iterator(array[index], index);
    }
  }


  // Cached non-operable function.
  function noop() {}


  // Load a package with all of associated assets ans dependences.
  // `preload` parameter is an optional array of URLs which are needed to load
  // before the given package.
  function loadAssets(pkgName, preload, callback) {
    var resources;

    if (2 === arguments.length) {
      callback = preload;
      preload  = null;
    }

    if (!assets[pkgName]) {
      callback(new Error('Package "' + pkgName + '" has no resources.'));
      return;
    }

    // Copy the preload array to allow pushing without side-effects.
    resources = preload ? preload.slice(0) : [];

    forEach(assets[pkgName].loadingQueue, function (dependency) {
      var pkgDist = assets[dependency];

      if (pkgDist.css && !loaded[pkgDist.css]) {
        resources.push(pkgDist.css);
      }

      if (pkgDist.js && !loaded[pkgDist.js]) {
        resources.push(pkgDist.js);
      }
    });

    yepnope({
      load: resources,
      complete: function () {
        forEach(resources, function (res) { loaded[res] = true; });
        callback();
      }
    });
  }


  // Loads all necessary shims and libraries and assets for given package.
  loadAssets.init = function init(assetsMap, pkgName) {
    var shims = [];

    // Set internal assets map.
    assets = assetsMap;

    // Init can be called only once.
    loadAssets.init = noop;

    // Mark all stylesheets of the given package as loaded, since they are
    // included to head of the page.
    forEach(assets[pkgName].loadingQueue, function (dependency) {
      if (assets[dependency].css) {
        loaded[assets[dependency].css] = true;
      }
    });

    // Choose needed polyfills.
    if (!window.JSON) {
      // JSON is required for Opera < 11 + IE < 8
      //See: http://caniuse.com/json
      shims.push(<%- JSON.stringify(asset_path('vendor/json2.js')) %>);
    }

    loadAssets(pkgName, shims, function () {
      if (window.N) {
        window.N.emit('init_complete');
      } else {
        alert('Nodeca error: Cannot access "N" sandbox object after ' +
              'loading main package of this page. Ensure "lib" package ' +
              'is declared in the dependency list of that package.');
      }
    });
  };


  return loadAssets;
}());


// vim: filetype=javascript:syntax=javascript
