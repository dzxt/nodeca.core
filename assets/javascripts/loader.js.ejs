//= require vendor/modernizr.custom
//= require vendor/yepnope
//= require_self


/*global yepnope*/


var loadAssets = window.loadAssets = (function () {
  'use strict';


  // Mapping of package names to package metadata for all available packages at
  // the currect locale. The metadata is an object consists of three keys:
  //
  //   `js` is a path to a bundle with JavaScript part of the package.
  //   `css` is the same but for CSS.
  //   `loadingQueue` is an array of package names which are needed to load in
  //   order to load _this_ package. It contains the given package too.
  //
  // This variable is initialized by `loadAssets.init()`.
  var assets;


  // Hash table that keeps track on loaded assets.
  var loaded = {};


  // Simple cross-browser `forEach` iterator for arrays.
  function forEach(array, iterator) {
    var index, length;

    for (index = 0, length = array.length; index < length; index += 1) {
      iterator(array[index], index);
    }
  }


  // Cached non-operable function.
  function noop() {}


  function loadAssets(pkgName, callback) {
    var resources = [];

    if (!assets[pkgName]) {
      callback(new Error('Package "' + pkgName + '" has no resources.'));
      return;
    }

    forEach(assets[pkgName].loadingQueue, function (dependency) {
      if (assets[dependency].css && !loaded[assets[dependency].css]) {
        resources.push(assets[dependency].css);
      }

      if (assets[dependency].js && !loaded[assets[dependency].js]) {
        resources.push(assets[dependency].js);
      }
    });

    if (resources.length) {
      yepnope({
        load: resources,
        complete: function () {
          forEach(resources, function (res) { loaded[res] = true; });
          callback();
        }
      });
    }
  }


  // Loads all necessary shims and libraries and assets for given package.
  loadAssets.init = function init(assetsMap, pkgName) {
    var shims = [];

    function initComplete() {
      loadAssets(pkgName, function () {
        if (window.N) {
          window.N.emit('init_complete');
        } else {
          alert('Nodeca error: Cannot access "N" sandbox object after ' +
                'loading main package of this page. Ensure "lib" package ' +
                'is declared in the dependency list of that package.');
        }
      });
    }

    // Set internal assets map.
    assets = assetsMap;

    // Init can be called only once.
    loadAssets.init = noop;

    // Mark all stylesheets of the given package as loaded, since they are
    // included to head of the page.
    forEach(assets[pkgName].loadingQueue, function (dependency) {
      if (assets[dependency].css) {
        loaded[assets[dependency].css] = true;
      }
    });

    // Choose needed polyfills.
    if (!window.JSON) {
      // JSON is required for Opera < 11 + IE < 8
      //See: http://caniuse.com/json
      shims.push(<%- JSON.stringify(asset_path('vendor/json2.js')) %>);
    }

    if (shims.length) {
      yepnope({load: shims, complete: initComplete});
    } else {
      initComplete();
    }
  };


  return loadAssets;
}());


// vim: filetype=javascript:syntax=javascript
