//= require modernizr.custom
//= require yepnope
//= require_self


/*jshint browser:true,node:false*/
/*global yepnope, nodeca*/


var loadAssets = window.loadAssets = (function () {
  'use strict';


  // assets map for namespaces only - set with loadAssets.init()
  var assets;


  // check if `obj` is a function
  function isFunction(obj) {
    return '[object Function]' === Object.prototype.toString.call(obj);
  }


  // Simple cross-browser `forEach` iterator for `Arrays`
  function forEach(arr, iter) {
    var i, l;

    for (i = 0, l = arr.length; i < l; i++) {
      iter(arr[i], i);
    }
  }


  // cached non-operable function
  function noop() {}


  function loadAssets(namespace, callback) {
    var resources = [];


    if (!assets[namespace] || !!assets[namespace].loaded) {
      (callback || noop)();
      return;
    }

    resources = resources.concat(assets[namespace].css || []);
    resources = resources.concat(assets[namespace].js || []);

    yepnope({
      load:     resources,
      complete: function () {
        assets[namespace].loaded = true;
        (callback || noop)();
      }
    });
  }


  // internal helper used by load_assets,init that loads resources and fires
  // callback only once all resources were injected.
  function loadResources(resources, callback) {
    var i, count = resources.length;

    // fired once all queued scripts were injected
    function complete() {
      count--;

      if (0 === count) {
        callback();
      }
    }

    // assign complete calback for each resource object
    for (i = 0; i < count; i++) {
      resources[i].complete = complete;
    }

    // queue resources
    yepnope(resources);
  }


  // loads all necessary shims and libraries and assets for given namespace
  loadAssets.init = function init(assetsMap, namespace) {
    var resources = [], namespaces;

    // set internal assets map
    assets = assetsMap;

    // init can be called only once
    loadAssets.init = noop;

    // set list of requried namespaces
    namespaces = 'admin' === namespace ? [namespace] : ['common', namespace];

    // FIXME: `lib` namespace is a *special case* namespace
    //        and will be removed once it will be possible to
    //        bundle it into admin/common app.js
    namespaces.unshift('lib');

    //
    // Fill resources with shims and polyfills
    //

    resources.push({
      //  JSON is required for Opera < 11 + IE < 8
      //  See: http://caniuse.com/json
      test: !!window.JSON,
      nope: <%- JSON.stringify(asset_path('json2.js')) %>
    });

    //
    // Add resource with assets of required namespaces
    //

    forEach(namespaces, function (ns) {
      if (assets[ns] && assets[ns].js && assets[ns].js.length) {
        resources.push({ load: assets[ns].js });
      }
    });

    //
    // Queue assets injections
    //

    loadResources(resources, function () {
      forEach(namespaces, function (ns) {
        if (assets[ns]) {
          assets[ns].loaded = true;

          if (nodeca.client[ns] && isFunction(nodeca.client[ns].init)) {
            nodeca.client[ns].init();
          }
        }
      });
    });
  };


  return loadAssets;
}());

// vim: filetype=javascript:syntax=javascript
