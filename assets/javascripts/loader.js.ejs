//= require vendor/modernizr.custom
//= require vendor/yepnope
//= require_self


/*global yepnope*/


(function (global) {
  'use strict';

  var URL_JSON2_SHIM  = <%- JSON.stringify(asset_path('vendor/json2.js')) %>
    , URL_ES5_SHIM    = <%- JSON.stringify(asset_path('vendor/es5-shim.js')) %>;

  // Mapping of package names to package metadata for all available packages at
  // the currect locale. The metadata is an object consists of three keys:
  //
  //   assets.js[package]           - URL to bundle, containing this package's JS
  //   assets.css[package]          - URL to bundle, containing this package's CSS
  //   assets.loadingQueue[package] - sorted list of dependencies, including this
  //                                  package (just list of package names)
  //
  // This variable is initialized by `loadAssets.init()`.

  var assets;


  // Track loaded URLs (as keys, values are just `true`)
  var loaded = {};


  var modules = {};


  // Simple cross-browser `forEach` iterator for arrays.
  function forEach(array, iterator) {
    var index, length;

    for (index = 0, length = array.length; index < length; index += 1) {
      iterator(array[index], index);
    }
  }


  function isFunction(object) {
    return '[object Function]' === Object.prototype.toString.call(object);
  }


  // Cached non-operable function.
  function noop() {}


  // Load a package with all of associated assets ans dependences.
  // `preload` parameter is an optional array of URLs which are needed to load
  // before the given package.
  function loadAssets(pkgName, preload, callback) {
    var resources;

    if (isFunction(preload)) {
      callback = preload;
      preload  = null;
    }

    if (!assets[pkgName]) {
      callback(new Error('We dont know such package (' + pkgName + ')'));
      return;
    }

    // Copy the preload array to allow pushing without side-effects.
    resources = preload ? preload.slice(0) : [];

    forEach(assets[pkgName].loadingQueue, function (dependency) {
      var pkgDist = assets[dependency];

      if (pkgDist.css && !loaded[pkgDist.css]) {
        resources.push(pkgDist.css);
      }

      if (pkgDist.js && !loaded[pkgDist.js]) {
        resources.push(pkgDist.js);
      }
    });

    yepnope({
      load: resources,
      complete: function () {
        forEach(resources, function (res) { loaded[res] = true; });
        callback();
      }
    });
  }


  // Loads all necessary shims and libraries and assets for given package.
  loadAssets.init = function init(assetsMap, pkgName) {
    var shims = [];

    // Set internal assets map.
    assets = assetsMap;

    // Init can be called only once.
    loadAssets.init = noop;

    // Mark all stylesheets of the given package as loaded, since they are
    // included to head of the page.
    forEach(assets[pkgName].loadingQueue, function (dependency) {
      if (assets[dependency].css) {
        loaded[assets[dependency].css] = true;
      }
    });

    // Choose necessary polyfills.
    if (!window.JSON) {
      // JSON is required for Opera < 11 + IE < 8
      //See: http://caniuse.com/json
      shims.push(URL_JSON2_SHIM);
    }
    if (!Function.prototype.bind) {
      // http://kangax.github.com/es5-compat-table/
      shims.push(URL_ES5_SHIM);
    }

    loadAssets(pkgName, shims, function () {
      if (window.N) {
        window.N.emit('init_complete');
      } else {
        alert('Init error: failed to load core JS files. Refresh page & try again.' +
              'If problem still exists - contact administrator.');
      }
    });
  };


  function resolvePath(root, path) {
    var result, directory, filename;

    path = path.split('/');

    if ('.' === path[0] || '..' === path[0]) {
      result = root.split('/');
    } else {
      result = [];
    }

    while (0 !== path.length) {
      directory = path.shift();

      if ('..' === directory) {
        result.pop();
      } else if ('.' !== directory) {
        result.push(directory);
      }
    }

    filename = result[result.length - 1];

    // Set ".js" file extension if the filename has no explicit extension.
    if (!(/\.[^.]+/.test(filename))) {
      result[result.length - 1] = filename + '.js';
    }

    return result.join('/');
  }


  function require(name) {
    if (!modules[name]) {
      throw new Error('Unknown module "' + name + '"');
    }

    if (!modules[name].module) {
      function __t__(phrase, params) {
        if ('.' === phrase.charAt(0)) {
          phrase = phrase.substr(1);
        } else {
          phrase = modules[name].apiPath + '.' + phrase;
        }
        return N.runtime.t(phrase, params);
      }

      function __require__(path) {
        return require(resolvePath(modules[name].root, path));
      }

      modules[name].module = {exports: {}};

      modules[name].body.call(
        modules[name].module.exports
      , modules[name].module.exports
      , modules[name].module
      , __require__
      , window.N
      , __t__
      );
    }

    return modules[name].module.exports;
  }


  function define(name, apiPath, root, body) {
    modules[name] = {
      root:    root
    , apiPath: apiPath
    , body:    body
    };
  }


  global.loadAssets = loadAssets;
  global.require    = require;
  global.define     = define;
})(window);
