//= require vendor/underscore
//= require system/wire

//= require_self
//= require_tree ./n


window.underscore  = window._;


var N = window.N = (function (N) {
  'use strict';

  N.views   = {};
  N.client  = {};

  N.runtime         = JSON.parse($('meta[name="runtime"]').attr('content'));
  N.runtime.env     = <%- JSON.stringify(N.runtime.env) %>;
  N.runtime.version = <%- JSON.stringify(N.runtime.version) %>;
  N.runtime.router  = new Pointer();
  N.runtime.i18n    = new BabelFish();

  // translations injector
  N.runtime.i18n.load = function loadTranslations(lang, data) {
    if (undefined === N.runtime.i18n._storage[lang]) {
      N.runtime.i18n._storage[lang] = {};
    }

    $.extend(N.runtime.i18n._storage[lang], data);
  };

  // translation helper with active locale
  N.runtime.t = function (phrase, params) {
    return N.runtime.i18n.t(N.runtime.locale, phrase, params);
  };

  N.runtime.t.exists = function (phrase) {
    return N.runtime.i18n.hasPhrase(N.runtime.locale, phrase);
  };

  // Create cross-browser log wrapper
  //
  (function () {
    var dumb;

    if (!window.console.log) {
      dumb = $.noop;
    } else {
      dumb = function (a, b, c, d, e) {
        try {
          window.console.log(a, b, c, d, e);
        } catch (e) {
          // do nothing
        }
      };
    }

    N.logger = {};

    _.each(['assert', 'error', 'info', 'warn', 'debug'], function (level) {
      if (!window.console[level]) {
        N.logger[level] = dumb;
      } else {
        N.logger[level] = function (a, b, c, d, e) {
          try {
            window.console[level](a, b, c, d, e);
          } catch (e) {
            // do nothing
          }
        };
      }
    });
  }());


  // fill in routes
  _.each(<%- jetson(N.runtime.client_routes) %>, function (v) {
    N.runtime.router.addRoute(v[0], v[1]);
  });


  return N;
}(new Wire));


// vim: syntax=javascript
