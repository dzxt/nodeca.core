//= require system/wire
//= require_self
//= require ./io


var N = window.N = (function (N) {
  'use strict';

  N.views   = {};
  N.client  = {};

  N.runtime         = JSON.parse($('meta[name="runtime"]').attr('content'));
  N.runtime.env     = <%- JSON.stringify(N.runtime.env) %>;
  N.runtime.version = <%- JSON.stringify(N.runtime.version) %>;
  N.runtime.router  = new Pointer();
  N.runtime.i18n    = new BabelFish({});

  // translations injector
  N.runtime.i18n.load = function loadTranslations(lang, data) {
    if (undefined === N.runtime.i18n._storage[lang]) {
      N.runtime.i18n._storage[lang] = {};
    }

    $.extend(N.runtime.i18n._storage[lang], data);
  };

  // translation helper with active locale
  N.runtime.t = function (phrase, params) {
    return N.runtime.i18n.t(N.runtime.locale, phrase, params);
  };

  N.runtime.t.exists = function (phrase) {
    return N.runtime.i18n.hasPhrase(N.runtime.locale, phrase);
  };

  // Create cross-browser log wrapper
  //
  (function () {
    N.logger = {};

    ['assert', 'error', 'info', 'warn', 'debug'].forEach(function (level) {
      N.logger[level] = function (object) {
        var message
          , parameters = arguments
          , index      = 1; // Format argument index; Always starts from 1.

        if (!(window.console && window.console.log)) {
          return;
        }

        if ('string' === typeof object) { // Format string.
          message = object.replace(/%[sdj%]/, function (match) {
            if (index >= parameters.length) {
              return match;
            }

            switch (match) {
            case '%%':
              return '%';
            case '%s':
              return String(parameters[index++]);
            case '%d':
              return Number(parameters[index++]);
            case '%j':
              return JSON.stringify(parameters[index++]);
            default:
              return match;
            }
          });
        } else { // Simple object.
          message = JSON.stringify(object);
        }

        try {
          if (window.console[level]) {
            window.console[level](message);
          } else {
            window.console.log(message);
          }
        } catch (err) {
          // Do nothing.
        }
      };
    });
  }());


  // fill in routes
  (<%- jetson(N.runtime.client_routes) -%>).forEach(function (v) {
    N.runtime.router.addRoute(v[0], v[1]);
  });


  return N;
}(new Wire));


// vim: syntax=javascript
